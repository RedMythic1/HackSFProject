(()=>{"use strict";var t=function(){return t=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},t.apply(this,arguments)},e=function(t,e,n,o){return new(n||(n=Promise))((function(r,i){function s(t){try{c(o.next(t))}catch(t){i(t)}}function a(t){try{c(o.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}c((o=o.apply(t,e||[])).next())}))},n=function(t,e){var n,o,r,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=a(0),s.throw=a(1),s.return=a(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;s&&(s=0,a[0]&&(i=0)),i;)try{if(n=1,o&&(r=2&a[0]?o.return:a[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,a[1])).done)return r;switch(o=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,o=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!((r=(r=i.trys).length>0&&r[r.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){i.label=a[1];break}if(6===a[0]&&i.label<r[1]){i.label=r[1],r=a;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(a);break}r[2]&&i.ops.pop(),i.trys.pop();continue}a=e.call(t,i)}catch(t){a=[6,t],o=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}},o=function(t,e,n){if(n||2===arguments.length)for(var o,r=0,i=e.length;r<i;r++)!o&&r in e||(o||(o=Array.prototype.slice.call(e,0,r)),o[r]=e[r]);return t.concat(o||Array.prototype.slice.call(e))},r=function(){function t(){}return t.preprocess=function(t){return t.toLowerCase().replace(/[^a-z0-9\s]/g,"").split(/\s+/).filter(Boolean)},t.levenshteinSimilarity=function(t,e){var n=t.length,o=e.length;if(0===n||0===o)return 0;for(var r=Array.from({length:n+1},(function(){return Array(o+1).fill(0)})),i=0;i<=n;i++)r[i][0]=i;for(var s=0;s<=o;s++)r[0][s]=s;for(i=1;i<=n;i++)for(s=1;s<=o;s++){var a=t[i-1]===e[s-1]?0:1;r[i][s]=Math.min(r[i-1][s]+1,r[i][s-1]+1,r[i-1][s-1]+a)}return 100*(1-r[n][o]/Math.max(n,o))},t.jaccardSimilarity=function(t,e){var n=new Set(t),r=new Set(e),i=Array.from(n).filter((function(t){return r.has(t)})).length,s=Array.from(new Set(o(o([],t,!0),e,!0))).length;return 0===s?0:i/s*100},t.tokenOverlap=function(t,e){for(var n=0,o=0,r=t;o<r.length;o++){var i=r[o];e.includes(i)&&n++}return 0===t.length?0:n/t.length*100},t.compute=function(t,e){var n=this.preprocess(t),o=this.preprocess(e),r=n.join(" "),i=o.join(" "),s=.4*this.levenshteinSimilarity(r,i)+.3*this.jaccardSimilarity(n,o)+.3*this.tokenOverlap(n,o);return Math.round(s)},t}(),i=function(){function t(){this.baseUrl="",this.baseUrl="localhost"===window.location.hostname?"http://localhost:3000":"",console.log("ApiService initialized with baseUrl: ".concat(this.baseUrl)),console.log("Current hostname: ".concat(window.location.hostname))}return t.prototype.getArticles=function(t){return e(this,void 0,void 0,(function(){var e,o,r,i,s;return n(this,(function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),e=t?"?interests=".concat(encodeURIComponent(t)):"",o="".concat(this.baseUrl,"/api/articles").concat(e),console.log("Fetching articles from: ".concat(o)),[4,fetch(o)];case 1:if(!(r=n.sent()).ok)throw console.error("Error response from server: ".concat(r.status)),new Error("Failed to fetch articles: ".concat(r.statusText));return[4,r.json()];case 2:return i=n.sent(),console.log("Articles fetched successfully. Count: ".concat(i.length)),console.log("Sample article data:",i.length>0?i[0]:"No articles"),[2,i.map((function(t){return{id:t.id||"",title:t.title||"Untitled Article",subject:t.subject||"",link:t.link||"",score:t.score||0,summary:t.summary||""}}))];case 3:return s=n.sent(),console.error("Error fetching articles:",s),[2,[]];case 4:return[2]}}))}))},t.prototype.getArticleDetails=function(t){return e(this,void 0,void 0,(function(){var e,o,r,i;return n(this,(function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),e="".concat(this.baseUrl,"/api/article/").concat(t),console.log("Fetching article details from: ".concat(e)),[4,fetch(e)];case 1:if(!(o=n.sent()).ok)throw console.error("Error response from server: ".concat(o.status)),new Error("Failed to fetch article details: ".concat(o.statusText));return[4,o.json()];case 2:return r=n.sent(),console.log("Article details response:",r),"success"===r.status&&r.article?(console.log("Article details fetched successfully:",r.article.title),[2,{title:r.article.title,link:r.article.link,summary:r.article.summary,content:r.article.content}]):(console.error("Invalid article data format:",r),[2,null]);case 3:return i=n.sent(),console.error("Error fetching article details:",i),[2,null];case 4:return[2]}}))}))},t.prototype.analyzeInterests=function(t){return e(this,void 0,void 0,(function(){var e,o;return n(this,(function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),[4,fetch("".concat(this.baseUrl,"/api/analyze-interests"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({interests:t})})];case 1:if(!(e=n.sent()).ok)throw new Error("Failed to analyze interests");return[4,e.json()];case 2:return[2,n.sent()];case 3:return o=n.sent(),console.error("Error analyzing interests:",o),[2,null];case 4:return[2]}}))}))},t}(),s=function(){function o(){this.apiService=new i,this.articlesContainer=document.getElementById("articles-container"),this.interestsInput=document.getElementById("interests-input"),this.submitButton=document.getElementById("submit-interests"),this.initEventListeners(),this.loadArticles()}return o.prototype.initEventListeners=function(){var t=this;this.submitButton&&this.submitButton.addEventListener("click",(function(){return t.handleInterestsSubmit()}))},o.prototype.loadArticles=function(o){return e(this,void 0,void 0,(function(){var i,s,a,c,l,u;return n(this,(function(d){switch(d.label){case 0:if(!this.articlesContainer)return[2];d.label=1;case 1:return d.trys.push([1,4,,5]),console.log("Loading articles with interests: ".concat(o||"none")),this.articlesContainer.innerHTML='<div class="loading">Loading articles...</div>',[4,this.apiService.getArticles(o)];case 2:return 0===(i=d.sent()).length?(this.articlesContainer.innerHTML='<div class="message">No articles found. Please try with different interests.</div>',[2]):(console.log("Fetched ".concat(i.length," articles, now scoring based on interests: ").concat(o||"none")),s=this.deduplicateArticles(i),console.log("Reduced to ".concat(s.length," unique articles after deduplication")),a=s.map((function(t){return function(t,o,i){return e(void 0,void 0,void 0,(function(){var e,s,a,c,l,u,d,p,h,m,f,g,v,y,b,x,w,C,E,S,A,L,k,T,F,I,M,N,O,j,R,H;return n(this,(function(n){switch(n.label){case 0:if(n.trys.push([0,10,,11]),console.log('\n========== SCORING ARTICLE: "'.concat(t.title,'" (ID: ').concat(t.id||"unknown",") ==========")),console.log('Interest Terms: "'.concat(o,'"')),e=Math.floor(25*Math.random())+70,console.log("Base score (if no interests): ".concat(e)),!o.trim())return console.log("No interests provided - Using base score: ".concat(e)),[2,e];if(s=o.toLowerCase().split(/[\s,]+/).filter((function(t){return t.length>2})).map((function(t){return t.trim()})),console.log("Parsed interest terms (".concat(s.length,"):"),s),0===s.length)return console.log("No valid interest terms after filtering - Using base score: ".concat(e)),[2,e];if(a="",c="none",!t.id)return[3,8];n.label=1;case 1:return n.trys.push([1,6,,7]),l=".cache/summary_".concat(t.id,".json"),console.log("ATTEMPTING TO LOAD SUMMARY FILE: ".concat(l)),[4,fetch(l)];case 2:return u=n.sent(),console.log("Summary file response status:",u.status,u.statusText),u.ok?[4,u.json()]:[3,4];case 3:return d=n.sent(),console.log("Summary file raw data:",d),d.summary&&"string"==typeof d.summary?(a=d.summary,c="cache file",console.log("SUCCESS: Loaded summary from file (".concat(a.length," chars)")),console.log('Summary preview: "'.concat(a.substring(0,100)).concat(a.length>100?"...":"",'"'))):console.warn("File loaded but no valid summary found in data"),[3,5];case 4:console.warn("Failed to load summary file: ".concat(u.status," ").concat(u.statusText)),n.label=5;case 5:return[3,7];case 6:return p=n.sent(),console.warn("Error loading summary for article id ".concat(t.id,":"),p),[3,7];case 7:return[3,9];case 8:console.log("No article ID available - Cannot load summary file"),n.label=9;case 9:return!a&&t.summary?(a=t.summary,c="article object",console.log("FALLBACK: Using summary from article object (".concat(a.length," chars)")),console.log('Summary preview: "'.concat(a.substring(0,100)).concat(a.length>100?"...":"",'"'))):a||console.log("WARNING: No summary available from any source!"),console.log("Final summary source: ".concat(c)),console.log("Final summary length: ".concat(a.length," characters")),h=t.title,m=t.subject||"",f="".concat(h," ").concat(m," ").concat(a),console.log("\n----- SCORING COMPONENT 1: TEXT SIMILARITY (0-60 points) -----"),g=0,f.length>0?(console.log("Computing text similarity using advanced methods..."),v=r.compute(o,f),console.log("Raw similarity score: ".concat(v," / 100")),g=v/100*60,console.log("Weighted similarity score: ".concat(g.toFixed(2)," / 60 points")),y=r.preprocess(o),b=r.preprocess(f),x=r.levenshteinSimilarity(y.join(" "),b.slice(0,200).join(" ")),w=r.jaccardSimilarity(y,b),C=r.tokenOverlap(y,b),console.log("Similarity metrics breakdown:\n  - Levenshtein similarity: ".concat(x.toFixed(2),"%\n  - Jaccard similarity:     ").concat(w.toFixed(2),"%\n  - Token overlap:          ").concat(C.toFixed(2),"%"))):console.log("Empty article content - Similarity score: 0 / 60 points"),console.log("\n----- SCORING COMPONENT 2: CONTEXTUAL RELEVANCE (0-30 points) -----"),E=0,(S=o.split(/\s+/).some((function(e){return t.title.toLowerCase().includes(e.toLowerCase())}))?2:1)>1&&console.log("Interest terms found in title: applying ".concat(S,"x title importance multiplier")),A=r.compute(o,h)*S,console.log("Title similarity: ".concat((A/S).toFixed(2),"% (raw) × ").concat(S," = ").concat(A.toFixed(2),"%")),L=m?r.compute(o,m):0,console.log("Subject similarity: ".concat(L.toFixed(2),"%")),k=.7*A+.3*L,console.log("Weighted context similarity: ".concat(k.toFixed(2),"%")),E=k/100*30,console.log("Contextual relevance score: ".concat(E.toFixed(2)," / 30 points")),console.log("\n----- SCORING COMPONENT 3: FRESHNESS & UNIQUENESS (0-10 points) -----"),T=0,F=t.id?parseInt(t.id.replace(/\D/g,"").slice(-2)||"0")%8:Math.floor(8*Math.random()),console.log("Base freshness: ".concat(F," / 8")),I=i.map((function(t){return t.title.toLowerCase()})),M=h.toLowerCase().split(/\s+/).filter((function(t){return t.length>4})),N=0,M.forEach((function(t){var e=I.filter((function(e){return e.includes(t)})).length;e<=Math.max(1,Math.floor(.2*i.length))&&(N++,console.log('  Uncommon word found: "'.concat(t,'" (in ').concat(e," articles)")))})),O=Math.min(2,.5*N),console.log("Uniqueness bonus: ".concat(O.toFixed(2)," points (").concat(N," uncommon words)")),T=F+O,console.log("Freshness & uniqueness score: ".concat(T.toFixed(2)," / 10 points")),console.log("\n----- FINAL SCORE CALCULATION -----"),j=g+E+T,console.log("Final score breakdown:\n  - Text Similarity:         ".concat(g.toFixed(2)," / 60\n  - Contextual Relevance:    ").concat(E.toFixed(2)," / 30\n  - Freshness & Uniqueness:  ").concat(T.toFixed(2)," / 10\n  ----------------------\n  TOTAL SCORE:               ").concat(j.toFixed(2)," / 100\n")),R={similarity:g.toFixed(2),contextual:E.toFixed(2),freshness:T.toFixed(2),final:j.toFixed(2)},console.log("Score components stored:",R),t.scoreComponents=R,console.log("\n----- SCORING COMPLETE -----"),[2,Math.min(100,Math.max(0,j))];case 10:return H=n.sent(),console.error("ERROR IN RANKING SYSTEM:",H),[2,Math.floor(25*Math.random())+70];case 11:return[2]}}))}))}(t,o||"",s)})),[4,Promise.all(a)]);case 3:return c=d.sent(),l=s.map((function(e,n){return t(t({},e),{score:Math.round(c[n])})})),console.log("Scored ".concat(l.length," articles using custom ranking system")),l.sort((function(t,e){return e.score-t.score})),console.log("Articles sorted by score"),this.renderArticles(l),[3,5];case 4:return u=d.sent(),console.error("Error loading articles:",u),this.articlesContainer.innerHTML='<div class="error">Error loading articles. Please try again later.</div>',[3,5];case 5:return[2]}}))}))},o.prototype.deduplicateArticles=function(t){var e=new Set;return t.filter((function(t){var n=t.title.toLowerCase().trim();return!e.has(n)&&(e.add(n),!0)}))},o.prototype.renderArticles=function(t){var e=this;if(this.articlesContainer){console.log("Rendering ".concat(t.length," articles")),this.articlesContainer.innerHTML="";var n=document.createElement("div");n.className="articles-grid",n.style.display="grid",n.style.gridTemplateColumns="repeat(auto-fill, minmax(300px, 1fr))",n.style.gap="20px",n.style.padding="10px",t.forEach((function(t){var o;if("id"in t&&t.id)o=t.id;else{var r=t.link.split("/");if(!(o=r[r.length-1])||"#"===o){var i=t.title.toLowerCase().replace(/[^a-z0-9]+/g,"-").replace(/(^-|-$)/g,"");o="".concat(i,"-").concat(Date.now().toString().slice(-6))}}console.log('Rendering article: "'.concat(t.title,'" (ID: ').concat(o,")"));var s=t.summary||"";s&&""!==s.trim()||(s=t.subject||"No introduction available");var a=t.title;a.toLowerCase().startsWith("deep dive:")&&(a=a.replace(/^deep dive:/i,"").trim());var c=document.createElement("div");c.className="article-card",c.style.border="1px solid #e0e0e0",c.style.borderRadius="8px",c.style.overflow="hidden",c.style.boxShadow="0 4px 6px rgba(0, 0, 0, 0.1)",c.style.backgroundColor="#ffffff",c.style.transition="transform 0.2s, box-shadow 0.2s",c.style.height="100%",c.style.display="flex",c.style.flexDirection="column",c.addEventListener("mouseenter",(function(){c.style.transform="translateY(-5px)",c.style.boxShadow="0 8px 15px rgba(0, 0, 0, 0.1)"})),c.addEventListener("mouseleave",(function(){c.style.transform="translateY(0)",c.style.boxShadow="0 4px 6px rgba(0, 0, 0, 0.1)"}));var l,u=(l=t.score)>90?"#4CAF50":l>75?"#2196F3":l>60?"#FF9800":"#9E9E9E";c.innerHTML='\n                <div class="article-header" style="padding: 15px; position: relative;">\n                    <div style="position: absolute; top: 15px; right: 15px; background-color: '.concat(u,'; color: white; padding: 5px 10px; border-radius: 12px; font-weight: bold; font-size: 14px;">\n                        ').concat(t.score,'\n                    </div>\n                    <h3 class="article-title" style="margin-top: 0; margin-bottom: 10px; font-size: 18px; color: #333; padding-right: 60px;">').concat(e.escapeHtml(a),'</h3>\n                    <div class="article-subject" style="font-size: 14px; color: #666; margin-bottom: 15px;">').concat(e.escapeHtml(t.subject||""),'</div>\n                    <div class="score-breakdown" style="background-color: #f9f9f9; border-radius: 5px; padding: 10px; margin-top: 10px; display: none;">\n                        <div style="margin-bottom: 8px;">\n                            <div style="height: 6px; background-color: #e0e0e0; border-radius: 3px; overflow: hidden;">\n                                <div style="height: 100%; width: ').concat(Math.min(100,t.score),"%; background-color: ").concat(u,';"></div>\n                            </div>\n                        </div>\n                        ').concat(t.scoreComponents?'\n                        <div style="font-size: 12px; color: #555;">\n                            <div style="display: flex; justify-content: space-between; margin-bottom: 2px;">\n                                <span>Keywords:</span>\n                                <span>'.concat(t.scoreComponents.similarity,'/60</span>\n                            </div>\n                            <div style="display: flex; justify-content: space-between; margin-bottom: 2px;">\n                                <span>Contextual:</span>\n                                <span>').concat(t.scoreComponents.contextual,'/30</span>\n                            </div>\n                            <div style="display: flex; justify-content: space-between;">\n                                <span>Freshness:</span>\n                                <span>').concat(t.scoreComponents.freshness,"/10</span>\n                            </div>\n                        </div>"):"",'\n                        <div style="text-align: center; margin-top: 5px; font-size: 12px; color: #888; cursor: pointer;" class="toggle-details">Show less</div>\n                    </div>\n                    <div style="text-align: center; margin-top: 5px; font-size: 12px; color: #888; cursor: pointer;" class="toggle-details">Show score details</div>\n                </div>\n                <div class="article-body" style="padding: 15px; border-top: 1px solid #eeeeee; flex-grow: 1; display: flex; flex-direction: column;">\n                    <div class="article-introduction" style="flex-grow: 1;">\n                        <p style="margin-top: 0; line-height: 1.5; color: #444; font-size: 14px;">').concat(e.truncateText(s,150),'</p>\n                    </div>\n                    <a href="#" class="article-link" data-article-id="').concat(o,'" style="display: inline-block; padding: 8px 15px; background-color: #2196F3; color: white; text-decoration: none; border-radius: 4px; text-align: center; margin-top: 15px; font-weight: 500; transition: background-color 0.2s;">Read more</a>\n                </div>\n            ');var d=c.querySelector(".article-link");d&&d.addEventListener("click",(function(t){t.preventDefault();var n=d.getAttribute("data-article-id");n?e.viewArticleDetails(n):console.error("Missing article ID in data attribute")}));var p=c.querySelectorAll(".toggle-details");if(2===p.length){var h=p[1],m=p[0],f=c.querySelector(".score-breakdown");h.addEventListener("click",(function(){f.style.display="block",h.style.display="none"})),m.addEventListener("click",(function(){f.style.display="none",h.style.display="block"}))}n.appendChild(c)})),this.articlesContainer.appendChild(n);var o=document.createElement("div");o.className="debug-info",o.textContent="Displaying ".concat(t.length," unique articles"),o.style.textAlign="center",o.style.marginTop="20px",o.style.fontSize="12px",o.style.color="#888",this.articlesContainer.appendChild(o)}},o.prototype.viewArticleDetails=function(t){return e(this,void 0,void 0,(function(){var e,o,r,i=this;return n(this,(function(n){switch(n.label){case 0:if(!this.articlesContainer)return[2];this.articlesContainer.innerHTML='<div class="loading">Loading article details...</div>',n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.apiService.getArticleDetails(t)];case 2:return(e=n.sent())?(this.renderArticleDetail(e),[3,4]):(this.articlesContainer.innerHTML='<div class="error">Article not found</div>',(r=document.createElement("button")).textContent="Back to Articles",r.className="back-button",r.addEventListener("click",(function(){var t,e=(null===(t=i.interestsInput)||void 0===t?void 0:t.value)||"";i.loadArticles(e)})),this.articlesContainer.appendChild(r),[2]);case 3:return o=n.sent(),console.error("Error loading article details:",o),this.articlesContainer.innerHTML='<div class="error">Error loading article details. Please try again later.</div>',(r=document.createElement("button")).textContent="Back to Articles",r.className="back-button",r.addEventListener("click",(function(){var t,e=(null===(t=i.interestsInput)||void 0===t?void 0:t.value)||"";i.loadArticles(e)})),this.articlesContainer.appendChild(r),[3,4];case 4:return[2]}}))}))},o.prototype.renderArticleDetail=function(t){var e=this;if(this.articlesContainer){this.articlesContainer.innerHTML="";var n=document.createElement("div");n.className="article-detail";var o="\n            <h2>".concat(this.escapeHtml(t.title),"</h2>\n        ");t.content?t.content.includes("<")&&t.content.includes(">")?o+='\n                    <div class="article-content">\n                        '.concat(this.sanitizeHtml(t.content),"\n                    </div>\n                "):o+='\n                    <div class="article-content">\n                        '.concat(this.formatSummary(t.content),"\n                    </div>\n                "):o+='\n                <div class="article-summary">\n                    '.concat(this.formatSummary(t.summary),"\n                </div>\n            "),o+='\n            <div class="article-actions">\n                <a href="'.concat(t.link,'" target="_blank" class="article-link">View Original</a>\n                <button id="back-to-articles" class="back-button">Back to Articles</button>\n            </div>\n        '),n.innerHTML=o;var r=n.querySelector("#back-to-articles");r&&r.addEventListener("click",(function(){var t,n=(null===(t=e.interestsInput)||void 0===t?void 0:t.value)||"";e.loadArticles(n)})),this.articlesContainer.appendChild(n)}},o.prototype.handleInterestsSubmit=function(){var t=this;if(this.interestsInput){var e=this.interestsInput.value.trim();console.log('Interests submitted: "'.concat(e,'"')),this.submitButton&&(this.submitButton.setAttribute("disabled","true"),this.submitButton.textContent="Loading..."),this.articlesContainer&&(this.articlesContainer.innerHTML='<div class="loading">Scoring articles based on your interests...</div>'),this.loadArticles(e).finally((function(){t.submitButton&&(t.submitButton.removeAttribute("disabled"),t.submitButton.textContent="Update Interests")}))}},o.prototype.formatSummary=function(t){var e=this;return t.split("\n\n").filter((function(t){return t.trim().length>0})).map((function(t){return"<p>".concat(e.escapeHtml(t),"</p>")})).join("")},o.prototype.escapeHtml=function(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")},o.prototype.truncateText=function(t,e){return t?t.length<=e?this.escapeHtml(t):this.escapeHtml(t.substring(0,e))+"...":""},o.prototype.sanitizeHtml=function(t){var e=document.createElement("div");return e.innerHTML=t,e.querySelectorAll("script").forEach((function(t){return t.remove()})),e.querySelectorAll("iframe").forEach((function(t){return t.remove()})),e.querySelectorAll("*").forEach((function(t){Array.from(t.attributes).forEach((function(e){(e.name.startsWith("on")||"href"===e.name&&e.value.startsWith("javascript:"))&&t.removeAttribute(e.name)}))})),e.innerHTML},o}();document.addEventListener("DOMContentLoaded",(function(){new s}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,