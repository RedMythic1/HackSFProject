(()=>{"use strict";var t=function(t,e,n,r){return new(n||(n=Promise))((function(i,a){function s(t){try{o(r.next(t))}catch(t){a(t)}}function c(t){try{o(r.throw(t))}catch(t){a(t)}}function o(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,c)}o((r=r.apply(t,e||[])).next())}))},e=function(t,e){var n,r,i,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=c(0),s.throw=c(1),s.return=c(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function c(c){return function(o){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;s&&(s=0,c[0]&&(a=0)),a;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return a.label++,{value:c[1],done:!1};case 5:a.label++,r=c[1],c=[0];continue;case 7:c=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){a=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){a.label=c[1];break}if(6===c[0]&&a.label<i[1]){a.label=i[1],i=c;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(c);break}i[2]&&a.ops.pop(),a.trys.pop();continue}c=e.call(t,a)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,o])}}},n=function(){function n(){this.baseUrl="",this.baseUrl="localhost"===window.location.hostname?"http://localhost:3000":"",console.log("ApiService initialized with baseUrl: ".concat(this.baseUrl))}return n.prototype.getArticles=function(n){return t(this,void 0,void 0,(function(){var t,r,i,a,s;return e(this,(function(e){switch(e.label){case 0:return e.trys.push([0,3,,4]),t=n?"?interests=".concat(encodeURIComponent(n)):"",r="".concat(this.baseUrl,"/api/articles").concat(t),console.log("Fetching articles from: ".concat(r)),[4,fetch(r)];case 1:if(!(i=e.sent()).ok)throw console.error("Error response from server: ".concat(i.status)),new Error("Failed to fetch articles: ".concat(i.statusText));return[4,i.json()];case 2:return a=e.sent(),console.log("Articles fetched successfully. Count: ".concat(a.length)),[2,a];case 3:return s=e.sent(),console.error("Error fetching articles:",s),[2,[]];case 4:return[2]}}))}))},n.prototype.getArticleDetails=function(n){return t(this,void 0,void 0,(function(){var t,r,i,a;return e(this,(function(e){switch(e.label){case 0:return e.trys.push([0,3,,4]),t="".concat(this.baseUrl,"/api/article/").concat(n),console.log("Fetching article details from: ".concat(t)),[4,fetch(t)];case 1:if(!(r=e.sent()).ok)throw console.error("Error response from server: ".concat(r.status)),new Error("Failed to fetch article details: ".concat(r.statusText));return[4,r.json()];case 2:return i=e.sent(),console.log("Article details fetched successfully"),[2,i];case 3:return a=e.sent(),console.error("Error fetching article details:",a),[2,null];case 4:return[2]}}))}))},n.prototype.analyzeInterests=function(n){return t(this,void 0,void 0,(function(){var t,r;return e(this,(function(e){switch(e.label){case 0:return e.trys.push([0,3,,4]),[4,fetch("".concat(this.baseUrl,"/api/analyze-interests"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({interests:n})})];case 1:if(!(t=e.sent()).ok)throw new Error("Failed to analyze interests");return[4,t.json()];case 2:return[2,e.sent()];case 3:return r=e.sent(),console.error("Error analyzing interests:",r),[2,null];case 4:return[2]}}))}))},n}(),r=function(){function r(){this.apiService=new n,this.articlesContainer=document.getElementById("articles-container"),this.interestsInput=document.getElementById("interests-input"),this.submitButton=document.getElementById("submit-interests"),this.initEventListeners(),this.loadArticles()}return r.prototype.initEventListeners=function(){var t=this;this.submitButton&&this.submitButton.addEventListener("click",(function(){return t.handleInterestsSubmit()}))},r.prototype.loadArticles=function(n){return t(this,void 0,void 0,(function(){var t,r;return e(this,(function(e){switch(e.label){case 0:if(!this.articlesContainer)return[2];this.articlesContainer.innerHTML='<div class="loading">Loading articles...</div>',e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.apiService.getArticles(n)];case 2:return 0===(t=e.sent()).length?(this.articlesContainer.innerHTML='<div class="error">No articles found</div>',[2]):(this.renderArticles(t),[3,4]);case 3:return r=e.sent(),console.error("Error loading articles:",r),this.articlesContainer.innerHTML='<div class="error">Error loading articles. Please try again later.</div>',[3,4];case 4:return[2]}}))}))},r.prototype.renderArticles=function(t){var e=this;this.articlesContainer&&(this.articlesContainer.innerHTML="",t.forEach((function(t){var n,r=t.link.split("id=")[1]||"",i=document.createElement("div");i.className="article-card",i.innerHTML='\n                <div class="article-header">\n                    <h3 class="article-title">'.concat(e.escapeHtml(t.title),'</h3>\n                    <span class="article-score">Score: ').concat(t.score,'</span>\n                </div>\n                <div class="article-body">\n                    <div class="article-subject">').concat(e.escapeHtml(t.subject),'</div>\n                    <a href="/article/').concat(r,'" class="article-link" data-article-id="').concat(r,'">Read more</a>\n                </div>\n            ');var a=i.querySelector(".article-link");a&&a.addEventListener("click",(function(t){t.preventDefault(),e.viewArticleDetails(r)})),null===(n=e.articlesContainer)||void 0===n||n.appendChild(i)})))},r.prototype.viewArticleDetails=function(n){return t(this,void 0,void 0,(function(){var t,r,i,a=this;return e(this,(function(e){switch(e.label){case 0:if(!this.articlesContainer)return[2];this.articlesContainer.innerHTML='<div class="loading">Loading article details...</div>',e.label=1;case 1:return e.trys.push([1,3,,4]),[4,this.apiService.getArticleDetails(n)];case 2:return(t=e.sent())?(this.renderArticleDetail(t),[3,4]):(this.articlesContainer.innerHTML='<div class="error">Article not found</div>',(i=document.createElement("button")).textContent="Back to Articles",i.className="back-button",i.addEventListener("click",(function(){var t,e=(null===(t=a.interestsInput)||void 0===t?void 0:t.value)||"";a.loadArticles(e)})),this.articlesContainer.appendChild(i),[2]);case 3:return r=e.sent(),console.error("Error loading article details:",r),this.articlesContainer.innerHTML='<div class="error">Error loading article details. Please try again later.</div>',(i=document.createElement("button")).textContent="Back to Articles",i.className="back-button",i.addEventListener("click",(function(){var t,e=(null===(t=a.interestsInput)||void 0===t?void 0:t.value)||"";a.loadArticles(e)})),this.articlesContainer.appendChild(i),[3,4];case 4:return[2]}}))}))},r.prototype.renderArticleDetail=function(t){var e=this;if(this.articlesContainer){this.articlesContainer.innerHTML="";var n=document.createElement("div");n.className="article-detail",n.innerHTML="\n            <h2>".concat(this.escapeHtml(t.title),'</h2>\n            <div class="article-summary">\n                ').concat(this.formatSummary(t.summary),'\n            </div>\n            <div class="article-actions">\n                <a href="').concat(t.link,'" target="_blank" class="article-link">View Original</a>\n                <button id="back-to-articles" class="back-button">Back to Articles</button>\n            </div>\n        ');var r=n.querySelector("#back-to-articles");r&&r.addEventListener("click",(function(){var t,n=(null===(t=e.interestsInput)||void 0===t?void 0:t.value)||"";e.loadArticles(n)})),this.articlesContainer.appendChild(n)}},r.prototype.handleInterestsSubmit=function(){var t,e=(null===(t=this.interestsInput)||void 0===t?void 0:t.value)||"";this.loadArticles(e)},r.prototype.formatSummary=function(t){var e=this;return t.split("\n\n").filter((function(t){return t.trim().length>0})).map((function(t){return"<p>".concat(e.escapeHtml(t),"</p>")})).join("")},r.prototype.escapeHtml=function(t){return t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")},r}();document.addEventListener("DOMContentLoaded",(function(){new r}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,