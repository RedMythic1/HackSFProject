(()=>{"use strict";var n={56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],c=0;c<n.length;c++){var s=n[c],l=r.base?s[0]+r.base:s[0],A=i[l]||0,d="".concat(l," ").concat(A);i[l]=A+1;var u=t(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=o(p,r);r.byIndex=c,e.splice(c,0,{identifier:d,updater:m,references:1})}a.push(d)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var c=t(i[a]);e[c].references--}for(var s=r(n,o),l=0;l<i.length;l++){var A=t(i[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}i=s}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},208:(n,e,t)=>{t.d(e,{A:()=>c});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([n.id,"body {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  margin: 0;\n  padding: 0;\n  background-color: #f5f7fa;\n  color: #333;\n  line-height: 1.5;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nheader {\n  background-color: #fff;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  padding: 20px 0;\n  margin-bottom: 30px;\n}\n\nh1 {\n  text-align: center;\n  color: #2c3e50;\n  margin: 0;\n  padding: 0;\n  font-size: 2.2rem;\n}\n\n.interests-form {\n  display: flex;\n  justify-content: center;\n  margin: 30px auto;\n  max-width: 600px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  border-radius: 8px;\n  overflow: hidden;\n  background: white;\n}\n\n#interests-input {\n  flex-grow: 1;\n  padding: 15px;\n  border: none;\n  font-size: 16px;\n  outline: none;\n}\n\n#submit-interests {\n  padding: 15px 25px;\n  background-color: #3498db;\n  color: white;\n  border: none;\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 16px;\n  transition: background-color 0.2s;\n}\n\n#submit-interests:hover {\n  background-color: #2980b9;\n}\n\n.articles-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  gap: 25px;\n  margin-top: 20px;\n}\n\n.article-count {\n  grid-column: 1 / -1;\n  padding: 10px 15px;\n  background-color: #e8f4fd;\n  border-radius: 6px;\n  font-size: 14px;\n  color: #2c3e50;\n  margin-bottom: 15px;\n}\n\n.article-card {\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.07);\n  overflow: hidden;\n  position: relative;\n  transition: transform 0.2s, box-shadow 0.2s;\n  display: flex;\n  flex-direction: column;\n  cursor: pointer;\n}\n\n.article-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\n}\n\n.article-card.expanded .article-summary {\n  max-height: 1000px;\n  overflow: visible;\n}\n\n.score-badge {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  width: 36px;\n  height: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  font-weight: bold;\n  color: white;\n  font-size: 14px;\n}\n\n.high-score {\n  background-color: #4CAF50;\n}\n\n.medium-score {\n  background-color: #2196F3;\n}\n\n.low-score {\n  background-color: #FF9800;\n}\n\n.no-score {\n  background-color: #9E9E9E;\n}\n\n.article-title {\n  padding: 20px 20px 5px;\n  margin: 0;\n  font-size: 18px;\n  padding-right: 50px; /* Space for score badge */\n  color: #2c3e50;\n}\n\n.article-subject {\n  padding: 0 20px 10px;\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\n.article-summary {\n  padding: 0 20px 15px;\n  font-size: 14px;\n  color: #555;\n  max-height: 100px;\n  overflow: hidden;\n  transition: max-height 0.3s;\n}\n\n.score-details {\n  display: none;\n  padding: 0 20px;\n  background-color: #f9f9f9;\n  border-top: 1px solid #eee;\n  border-bottom: 1px solid #eee;\n  margin: 10px 0;\n}\n\n.score-details.visible {\n  display: block;\n}\n\n.score-details ul {\n  list-style: none;\n  padding: 10px 0;\n  margin: 0;\n}\n\n.score-details li {\n  font-size: 13px;\n  padding: 3px 0;\n}\n\n.score-details-btn, .view-article-btn {\n  background: none;\n  border: none;\n  color: #3498db;\n  cursor: pointer;\n  padding: 8px 15px;\n  font-size: 13px;\n  margin: 5px;\n  transition: color 0.2s;\n}\n\n.score-details-btn:hover, .view-article-btn:hover {\n  color: #2980b9;\n}\n\n.view-article-btn {\n  margin-top: auto;\n  align-self: center;\n  margin-bottom: 15px;\n  background-color: #3498db;\n  color: white;\n  border-radius: 4px;\n  padding: 10px 20px;\n  font-weight: 500;\n}\n\n.view-article-btn:hover {\n  background-color: #2980b9;\n  color: white;\n}\n\n.article-detail {\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 0 3px 15px rgba(0, 0, 0, 0.1);\n  padding: 30px;\n  margin: 20px 0;\n}\n\n.article-detail h2 {\n  margin-top: 0;\n  color: #2c3e50;\n}\n\n.article-detail .article-link {\n  display: inline-block;\n  margin: 15px 0;\n  text-decoration: none;\n  color: #3498db;\n}\n\n.article-detail .article-content {\n  margin-top: 20px;\n  line-height: 1.7;\n}\n\n.no-results {\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 50px;\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.07);\n  color: #7f8c8d;\n}\n\n@media (max-width: 768px) {\n  .interests-form {\n    flex-direction: column;\n    max-width: 95%;\n  }\n  \n  #interests-input, #submit-interests {\n    width: 100%;\n  }\n  \n  .articles-container {\n    grid-template-columns: 1fr;\n  }\n}\n\nh2.section-title {\n  text-align: center;\n  margin: 30px 0;\n  color: #2c3e50;\n  font-size: 1.8rem;\n}\n\n/* Loading indicator */\n.loading {\n  text-align: center;\n  padding: 30px;\n  color: #7f8c8d;\n} ","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["body {\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n  margin: 0;\n  padding: 0;\n  background-color: #f5f7fa;\n  color: #333;\n  line-height: 1.5;\n}\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\nheader {\n  background-color: #fff;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n  padding: 20px 0;\n  margin-bottom: 30px;\n}\n\nh1 {\n  text-align: center;\n  color: #2c3e50;\n  margin: 0;\n  padding: 0;\n  font-size: 2.2rem;\n}\n\n.interests-form {\n  display: flex;\n  justify-content: center;\n  margin: 30px auto;\n  max-width: 600px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  border-radius: 8px;\n  overflow: hidden;\n  background: white;\n}\n\n#interests-input {\n  flex-grow: 1;\n  padding: 15px;\n  border: none;\n  font-size: 16px;\n  outline: none;\n}\n\n#submit-interests {\n  padding: 15px 25px;\n  background-color: #3498db;\n  color: white;\n  border: none;\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 16px;\n  transition: background-color 0.2s;\n}\n\n#submit-interests:hover {\n  background-color: #2980b9;\n}\n\n.articles-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  gap: 25px;\n  margin-top: 20px;\n}\n\n.article-count {\n  grid-column: 1 / -1;\n  padding: 10px 15px;\n  background-color: #e8f4fd;\n  border-radius: 6px;\n  font-size: 14px;\n  color: #2c3e50;\n  margin-bottom: 15px;\n}\n\n.article-card {\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.07);\n  overflow: hidden;\n  position: relative;\n  transition: transform 0.2s, box-shadow 0.2s;\n  display: flex;\n  flex-direction: column;\n  cursor: pointer;\n}\n\n.article-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\n}\n\n.article-card.expanded .article-summary {\n  max-height: 1000px;\n  overflow: visible;\n}\n\n.score-badge {\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  width: 36px;\n  height: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 50%;\n  font-weight: bold;\n  color: white;\n  font-size: 14px;\n}\n\n.high-score {\n  background-color: #4CAF50;\n}\n\n.medium-score {\n  background-color: #2196F3;\n}\n\n.low-score {\n  background-color: #FF9800;\n}\n\n.no-score {\n  background-color: #9E9E9E;\n}\n\n.article-title {\n  padding: 20px 20px 5px;\n  margin: 0;\n  font-size: 18px;\n  padding-right: 50px; /* Space for score badge */\n  color: #2c3e50;\n}\n\n.article-subject {\n  padding: 0 20px 10px;\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\n.article-summary {\n  padding: 0 20px 15px;\n  font-size: 14px;\n  color: #555;\n  max-height: 100px;\n  overflow: hidden;\n  transition: max-height 0.3s;\n}\n\n.score-details {\n  display: none;\n  padding: 0 20px;\n  background-color: #f9f9f9;\n  border-top: 1px solid #eee;\n  border-bottom: 1px solid #eee;\n  margin: 10px 0;\n}\n\n.score-details.visible {\n  display: block;\n}\n\n.score-details ul {\n  list-style: none;\n  padding: 10px 0;\n  margin: 0;\n}\n\n.score-details li {\n  font-size: 13px;\n  padding: 3px 0;\n}\n\n.score-details-btn, .view-article-btn {\n  background: none;\n  border: none;\n  color: #3498db;\n  cursor: pointer;\n  padding: 8px 15px;\n  font-size: 13px;\n  margin: 5px;\n  transition: color 0.2s;\n}\n\n.score-details-btn:hover, .view-article-btn:hover {\n  color: #2980b9;\n}\n\n.view-article-btn {\n  margin-top: auto;\n  align-self: center;\n  margin-bottom: 15px;\n  background-color: #3498db;\n  color: white;\n  border-radius: 4px;\n  padding: 10px 20px;\n  font-weight: 500;\n}\n\n.view-article-btn:hover {\n  background-color: #2980b9;\n  color: white;\n}\n\n.article-detail {\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 0 3px 15px rgba(0, 0, 0, 0.1);\n  padding: 30px;\n  margin: 20px 0;\n}\n\n.article-detail h2 {\n  margin-top: 0;\n  color: #2c3e50;\n}\n\n.article-detail .article-link {\n  display: inline-block;\n  margin: 15px 0;\n  text-decoration: none;\n  color: #3498db;\n}\n\n.article-detail .article-content {\n  margin-top: 20px;\n  line-height: 1.7;\n}\n\n.no-results {\n  grid-column: 1 / -1;\n  text-align: center;\n  padding: 50px;\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.07);\n  color: #7f8c8d;\n}\n\n@media (max-width: 768px) {\n  .interests-form {\n    flex-direction: column;\n    max-width: 95%;\n  }\n  \n  #interests-input, #submit-interests {\n    width: 100%;\n  }\n  \n  .articles-container {\n    grid-template-columns: 1fr;\n  }\n}\n\nh2.section-title {\n  text-align: center;\n  margin: 30px 0;\n  color: #2c3e50;\n  font-size: 1.8rem;\n}\n\n/* Loading indicator */\n.loading {\n  text-align: center;\n  padding: 30px;\n  color: #7f8c8d;\n} "],sourceRoot:""}]);const c=a},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);r&&a[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0;var r=t(72),o=t.n(r),i=t(825),a=t.n(i),c=t(659),s=t.n(c),l=t(56),A=t.n(l),d=t(540),u=t.n(d),p=t(113),m=t.n(p),f=t(208),g={};g.styleTagTransform=m(),g.setAttributes=A(),g.insert=s().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=u(),o()(f.A,g),f.A&&f.A.locals&&f.A.locals;var h=function(){return h=Object.assign||function(n){for(var e,t=1,r=arguments.length;t<r;t++)for(var o in e=arguments[t])Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n},h.apply(this,arguments)},C=function(n,e,t,r){return new(t||(t=Promise))((function(o,i){function a(n){try{s(r.next(n))}catch(n){i(n)}}function c(n){try{s(r.throw(n))}catch(n){i(n)}}function s(n){var e;n.done?o(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(a,c)}s((r=r.apply(n,e||[])).next())}))},E=function(n,e){var t,r,o,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=c(0),a.throw=c(1),a.return=c(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function c(c){return function(s){return function(c){if(t)throw new TypeError("Generator is already executing.");for(;a&&(a=0,c[0]&&(i=0)),i;)try{if(t=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){i.label=c[1];break}if(6===c[0]&&i.label<o[1]){i.label=o[1],o=c;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(c);break}o[2]&&i.ops.pop(),i.trys.pop();continue}c=e.call(n,i)}catch(n){c=[6,n],r=0}finally{t=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}},b=function(n,e,t){if(t||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return n.concat(r||Array.prototype.slice.call(e))},x=function(){function n(){}return n.preprocess=function(n){return n.toLowerCase().replace(/[^a-z0-9\s]/g,"").split(/\s+/).filter(Boolean)},n.levenshteinSimilarity=function(n,e){var t=n.length,r=e.length;if(0===t||0===r)return 0;for(var o=Array.from({length:t+1},(function(){return Array(r+1).fill(0)})),i=0;i<=t;i++)o[i][0]=i;for(var a=0;a<=r;a++)o[0][a]=a;for(i=1;i<=t;i++)for(a=1;a<=r;a++){var c=n[i-1]===e[a-1]?0:1;o[i][a]=Math.min(o[i-1][a]+1,o[i][a-1]+1,o[i-1][a-1]+c)}return 100*(1-o[t][r]/Math.max(t,r))},n.jaccardSimilarity=function(n,e){var t=new Set(n),r=new Set(e),o=Array.from(t).filter((function(n){return r.has(n)})).length,i=Array.from(new Set(b(b([],n,!0),e,!0))).length;return 0===i?0:o/i*100},n.tokenOverlap=function(n,e){for(var t=0,r=0,o=n;r<o.length;r++){var i=o[r];e.includes(i)&&t++}return 0===n.length?0:t/n.length*100},n.compute=function(n,e){var t=this.preprocess(n),r=this.preprocess(e),o=t.join(" "),i=r.join(" "),a=.4*this.levenshteinSimilarity(o,i)+.3*this.jaccardSimilarity(t,r)+.3*this.tokenOverlap(t,r);return Math.round(a)},n}(),B=function(){function n(){this.baseUrl="",this.baseUrl="localhost"===window.location.hostname?"http://localhost:3000":"",console.log("ApiService initialized with baseUrl: ".concat(this.baseUrl)),console.log("Current hostname: ".concat(window.location.hostname))}return n.prototype.getArticles=function(n){return C(this,void 0,void 0,(function(){var e,t,r,o,i;return E(this,(function(a){switch(a.label){case 0:return a.trys.push([0,3,,4]),e=n?"?interests=".concat(encodeURIComponent(n)):"",t="".concat(this.baseUrl,"/api/articles").concat(e),console.log("Fetching articles from: ".concat(t)),[4,fetch(t)];case 1:if(!(r=a.sent()).ok)throw console.error("Error response from server: ".concat(r.status)),new Error("Failed to fetch articles: ".concat(r.statusText));return[4,r.json()];case 2:return o=a.sent(),console.log("Articles fetched successfully. Count: ".concat(o.length)),console.log("Sample article data:",o.length>0?o[0]:"No articles"),[2,o.map((function(n){return{id:n.id||"",title:n.title||"Untitled Article",subject:n.subject||"",link:n.link||"",score:n.score||0,summary:n.summary||""}}))];case 3:return i=a.sent(),console.error("Error fetching articles:",i),[2,[]];case 4:return[2]}}))}))},n.prototype.getArticleDetails=function(n){return C(this,void 0,void 0,(function(){var e,t,r,o;return E(this,(function(i){switch(i.label){case 0:return i.trys.push([0,3,,4]),e="".concat(this.baseUrl,"/api/article/").concat(n),console.log("Fetching article details from: ".concat(e)),[4,fetch(e)];case 1:if(!(t=i.sent()).ok)throw console.error("Error response from server: ".concat(t.status)),new Error("Failed to fetch article details: ".concat(t.statusText));return[4,t.json()];case 2:return r=i.sent(),console.log("Article details response:",r),"success"===r.status&&r.article?(console.log("Article details fetched successfully:",r.article.title),[2,{title:r.article.title,link:r.article.link,summary:r.article.summary,content:r.article.content}]):(console.error("Invalid article data format:",r),[2,null]);case 3:return o=i.sent(),console.error("Error fetching article details:",o),[2,null];case 4:return[2]}}))}))},n.prototype.analyzeInterests=function(n){return C(this,void 0,void 0,(function(){var e,t;return E(this,(function(r){switch(r.label){case 0:return r.trys.push([0,3,,4]),[4,fetch("".concat(this.baseUrl,"/api/analyze-interests"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({interests:n})})];case 1:if(!(e=r.sent()).ok)throw new Error("Failed to analyze interests");return[4,e.json()];case 2:return[2,r.sent()];case 3:return t=r.sent(),console.error("Error analyzing interests:",t),[2,null];case 4:return[2]}}))}))},n}(),v=function(){function n(){this.apiService=new B,this.articlesContainer=document.getElementById("articles-container"),this.interestsInput=document.getElementById("interests-input"),this.submitButton=document.getElementById("submit-interests"),this.initEventListeners(),this.loadArticles()}return n.prototype.initEventListeners=function(){var n=this;this.submitButton&&this.submitButton.addEventListener("click",(function(){return n.handleInterestsSubmit()}))},n.prototype.loadArticles=function(n){return C(this,void 0,void 0,(function(){var e,t,r,o,i,a;return E(this,(function(c){switch(c.label){case 0:if(!this.articlesContainer)return[2];c.label=1;case 1:return c.trys.push([1,4,,5]),console.log("Loading articles with interests: ".concat(n||"none")),this.articlesContainer.innerHTML='<div class="loading">Loading articles...</div>',[4,this.apiService.getArticles(n)];case 2:return 0===(e=c.sent()).length?(this.articlesContainer.innerHTML='<div class="message">No articles found. Please try with different interests.</div>',[2]):(console.log("Fetched ".concat(e.length," articles, now scoring based on interests: ").concat(n||"none")),t=this.deduplicateArticles(e),console.log("Reduced to ".concat(t.length," unique articles after deduplication")),r=t.map((function(e){return function(n,e,t){return C(void 0,void 0,void 0,(function(){var r,o,i,a,c,s,l,A,d,u,p,m,f,g,h,C,b,B,v,y,w,k,S,L,T,I,N,M,j,F,O,z;return E(this,(function(E){switch(E.label){case 0:if(E.trys.push([0,10,,11]),console.log('\n========== SCORING ARTICLE: "'.concat(n.title,'" (ID: ').concat(n.id||"unknown",") ==========")),console.log('Interest Terms: "'.concat(e,'"')),r=Math.floor(25*Math.random())+70,console.log("Base score (if no interests): ".concat(r)),!e.trim())return console.log("No interests provided - Using base score: ".concat(r)),[2,r];if(o=e.toLowerCase().split(/[\s,]+/).filter((function(n){return n.length>2})).map((function(n){return n.trim()})),console.log("Parsed interest terms (".concat(o.length,"):"),o),0===o.length)return console.log("No valid interest terms after filtering - Using base score: ".concat(r)),[2,r];if(i="",a="none",!n.id)return[3,8];E.label=1;case 1:return E.trys.push([1,6,,7]),c=".cache/summary_".concat(n.id,".json"),console.log("ATTEMPTING TO LOAD SUMMARY FILE: ".concat(c)),[4,fetch(c)];case 2:return s=E.sent(),console.log("Summary file response status:",s.status,s.statusText),s.ok?[4,s.json()]:[3,4];case 3:return l=E.sent(),console.log("Summary file raw data:",l),l.summary&&"string"==typeof l.summary?(i=l.summary,a="cache file",console.log("SUCCESS: Loaded summary from file (".concat(i.length," chars)")),console.log('Summary preview: "'.concat(i.substring(0,100)).concat(i.length>100?"...":"",'"'))):console.warn("File loaded but no valid summary found in data"),[3,5];case 4:console.warn("Failed to load summary file: ".concat(s.status," ").concat(s.statusText)),E.label=5;case 5:return[3,7];case 6:return A=E.sent(),console.warn("Error loading summary for article id ".concat(n.id,":"),A),[3,7];case 7:return[3,9];case 8:console.log("No article ID available - Cannot load summary file"),E.label=9;case 9:return!i&&n.summary?(i=n.summary,a="article object",console.log("FALLBACK: Using summary from article object (".concat(i.length," chars)")),console.log('Summary preview: "'.concat(i.substring(0,100)).concat(i.length>100?"...":"",'"'))):i||console.log("WARNING: No summary available from any source!"),console.log("Final summary source: ".concat(a)),console.log("Final summary length: ".concat(i.length," characters")),d=n.title,u=n.subject||"",p="".concat(d," ").concat(u," ").concat(i),console.log("\n----- SCORING COMPONENT 1: TEXT SIMILARITY (0-60 points) -----"),m=0,p.length>0?(console.log("Computing text similarity using advanced methods..."),f=x.compute(e,p),console.log("Raw similarity score: ".concat(f," / 100")),m=f/100*60,console.log("Weighted similarity score: ".concat(m.toFixed(2)," / 60 points")),g=x.preprocess(e),h=x.preprocess(p),C=x.levenshteinSimilarity(g.join(" "),h.slice(0,200).join(" ")),b=x.jaccardSimilarity(g,h),B=x.tokenOverlap(g,h),console.log("Similarity metrics breakdown:\n  - Levenshtein similarity: ".concat(C.toFixed(2),"%\n  - Jaccard similarity:     ").concat(b.toFixed(2),"%\n  - Token overlap:          ").concat(B.toFixed(2),"%"))):console.log("Empty article content - Similarity score: 0 / 60 points"),console.log("\n----- SCORING COMPONENT 2: CONTEXTUAL RELEVANCE (0-30 points) -----"),v=0,(y=e.split(/\s+/).some((function(e){return n.title.toLowerCase().includes(e.toLowerCase())}))?2:1)>1&&console.log("Interest terms found in title: applying ".concat(y,"x title importance multiplier")),w=x.compute(e,d)*y,console.log("Title similarity: ".concat((w/y).toFixed(2),"% (raw) × ").concat(y," = ").concat(w.toFixed(2),"%")),k=u?x.compute(e,u):0,console.log("Subject similarity: ".concat(k.toFixed(2),"%")),S=.7*w+.3*k,console.log("Weighted context similarity: ".concat(S.toFixed(2),"%")),v=S/100*30,console.log("Contextual relevance score: ".concat(v.toFixed(2)," / 30 points")),console.log("\n----- SCORING COMPONENT 3: FRESHNESS & UNIQUENESS (0-10 points) -----"),L=0,T=n.id?parseInt(n.id.replace(/\D/g,"").slice(-2)||"0")%8:Math.floor(8*Math.random()),console.log("Base freshness: ".concat(T," / 8")),I=t.map((function(n){return n.title.toLowerCase()})),N=d.toLowerCase().split(/\s+/).filter((function(n){return n.length>4})),M=0,N.forEach((function(n){var e=I.filter((function(e){return e.includes(n)})).length;e<=Math.max(1,Math.floor(.2*t.length))&&(M++,console.log('  Uncommon word found: "'.concat(n,'" (in ').concat(e," articles)")))})),j=Math.min(2,.5*M),console.log("Uniqueness bonus: ".concat(j.toFixed(2)," points (").concat(M," uncommon words)")),L=T+j,console.log("Freshness & uniqueness score: ".concat(L.toFixed(2)," / 10 points")),console.log("\n----- FINAL SCORE CALCULATION -----"),F=m+v+L,console.log("Final score breakdown:\n  - Text Similarity:         ".concat(m.toFixed(2)," / 60\n  - Contextual Relevance:    ").concat(v.toFixed(2)," / 30\n  - Freshness & Uniqueness:  ").concat(L.toFixed(2)," / 10\n  ----------------------\n  TOTAL SCORE:               ").concat(F.toFixed(2)," / 100\n")),O={similarity:m.toFixed(2),contextual:v.toFixed(2),freshness:L.toFixed(2),final:F.toFixed(2)},console.log("Score components stored:",O),n.scoreComponents=O,console.log("\n----- SCORING COMPLETE -----"),[2,Math.min(100,Math.max(0,F))];case 10:return z=E.sent(),console.error("ERROR IN RANKING SYSTEM:",z),[2,Math.floor(25*Math.random())+70];case 11:return[2]}}))}))}(e,n||"",t)})),[4,Promise.all(r)]);case 3:return o=c.sent(),i=t.map((function(n,e){return h(h({},n),{score:Math.round(o[e])})})),console.log("Scored ".concat(i.length," articles using custom ranking system")),i.sort((function(n,e){return e.score-n.score})),console.log("Articles sorted by score"),this.renderArticles(i),[3,5];case 4:return a=c.sent(),console.error("Error loading articles:",a),this.articlesContainer.innerHTML='<div class="error">Error loading articles. Please try again later.</div>',[3,5];case 5:return[2]}}))}))},n.prototype.deduplicateArticles=function(n){var e=new Set;return n.filter((function(n){var t=n.title.toLowerCase().trim();return!e.has(t)&&(e.add(t),!0)}))},n.prototype.renderArticles=function(n){var e=this;if(this.articlesContainer)if(this.articlesContainer.innerHTML="",n&&0!==n.length){var t=document.createElement("div");t.className="article-count",t.textContent="Displaying ".concat(n.length," unique articles"),this.articlesContainer.appendChild(t),n.forEach((function(n){var t=document.createElement("div");t.className="article-card",t.dataset.id=n.id||"";var r=e.getScoreClass(n.score),o=document.createElement("div");o.className="score-badge ".concat(r),o.textContent=n.score.toString(),t.appendChild(o);var i=document.createElement("h3");if(i.className="article-title",i.textContent=n.title,t.appendChild(i),n.subject){var a=document.createElement("div");a.className="article-subject",a.textContent=n.subject,t.appendChild(a)}if(n.summary){var c=document.createElement("div");c.className="article-summary",c.innerHTML=e.formatSummary(e.truncateText(n.summary,200)),t.appendChild(c)}if(n.scoreComponents){var s=document.createElement("div");s.className="score-details";var l=document.createElement("ul"),A=document.createElement("button");A.className="score-details-btn",A.textContent="Show score details",A.addEventListener("click",(function(){s&&s.classList&&(s.classList.toggle("visible"),A.textContent=s.classList.contains("visible")?"Hide score details":"Show score details")})),Object.entries(n.scoreComponents).forEach((function(n){var e=n[0],t=n[1],r=document.createElement("li"),o=e.charAt(0).toUpperCase()+e.slice(1);r.innerHTML="<strong>".concat(o,":</strong> ").concat(t),l.appendChild(r)})),s.appendChild(l),t.appendChild(A),t.appendChild(s)}var d=document.createElement("button");d.className="view-article-btn",d.textContent="View Article",d.addEventListener("click",(function(){n.id&&e.viewArticleDetails(n.id)})),t.appendChild(d),e.articlesContainer.appendChild(t)})),document.querySelectorAll(".article-card").forEach((function(n){n.addEventListener("click",(function(e){n&&n.classList&&e.target&&("BUTTON"===e.target.tagName||n.classList.toggle("expanded"))}))}))}else this.articlesContainer.innerHTML='<div class="no-results">No articles found. Try adjusting your interests.</div>'},n.prototype.viewArticleDetails=function(n){return C(this,void 0,void 0,(function(){var e,t,r,o=this;return E(this,(function(i){switch(i.label){case 0:if(!this.articlesContainer)return[2];this.articlesContainer.innerHTML='<div class="loading">Loading article details...</div>',i.label=1;case 1:return i.trys.push([1,3,,4]),[4,this.apiService.getArticleDetails(n)];case 2:return(e=i.sent())?(this.renderArticleDetail(e),[3,4]):(this.articlesContainer.innerHTML='<div class="error">Article not found</div>',(r=document.createElement("button")).textContent="Back to Articles",r.className="back-button",r.addEventListener("click",(function(){var n,e=(null===(n=o.interestsInput)||void 0===n?void 0:n.value)||"";o.loadArticles(e)})),this.articlesContainer.appendChild(r),[2]);case 3:return t=i.sent(),console.error("Error loading article details:",t),this.articlesContainer.innerHTML='<div class="error">Error loading article details. Please try again later.</div>',(r=document.createElement("button")).textContent="Back to Articles",r.className="back-button",r.addEventListener("click",(function(){var n,e=(null===(n=o.interestsInput)||void 0===n?void 0:n.value)||"";o.loadArticles(e)})),this.articlesContainer.appendChild(r),[3,4];case 4:return[2]}}))}))},n.prototype.renderArticleDetail=function(n){var e=this;if(this.articlesContainer){this.articlesContainer.innerHTML="";var t=document.createElement("div");t.className="article-detail";var r="\n            <h2>".concat(this.escapeHtml(n.title),"</h2>\n        ");n.content?n.content.includes("<")&&n.content.includes(">")?r+='\n                    <div class="article-content">\n                        '.concat(this.sanitizeHtml(n.content),"\n                    </div>\n                "):r+='\n                    <div class="article-content">\n                        '.concat(this.formatSummary(n.content),"\n                    </div>\n                "):r+='\n                <div class="article-summary">\n                    '.concat(this.formatSummary(n.summary),"\n                </div>\n            "),r+='\n            <div class="article-actions">\n                <a href="'.concat(n.link,'" target="_blank" class="article-link">View Original</a>\n                <button id="back-to-articles" class="back-button">Back to Articles</button>\n            </div>\n        '),t.innerHTML=r;var o=t.querySelector("#back-to-articles");o&&o.addEventListener("click",(function(){var n,t=(null===(n=e.interestsInput)||void 0===n?void 0:n.value)||"";e.loadArticles(t)})),this.articlesContainer.appendChild(t)}},n.prototype.handleInterestsSubmit=function(){var n=this;if(this.interestsInput){var e=this.interestsInput.value.trim();console.log('Interests submitted: "'.concat(e,'"')),this.submitButton&&(this.submitButton.setAttribute("disabled","true"),this.submitButton.textContent="Loading..."),this.articlesContainer&&(this.articlesContainer.innerHTML='<div class="loading">Scoring articles based on your interests...</div>'),this.loadArticles(e).finally((function(){n.submitButton&&(n.submitButton.removeAttribute("disabled"),n.submitButton.textContent="Update Interests")}))}},n.prototype.formatSummary=function(n){var e=this;return n.split("\n\n").filter((function(n){return n.trim().length>0})).map((function(n){return"<p>".concat(e.escapeHtml(n),"</p>")})).join("")},n.prototype.escapeHtml=function(n){return n.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;")},n.prototype.truncateText=function(n,e){return n?n.length<=e?this.escapeHtml(n):this.escapeHtml(n.substring(0,e))+"...":""},n.prototype.sanitizeHtml=function(n){var e=document.createElement("div");return e.innerHTML=n,e.querySelectorAll("script").forEach((function(n){return n.remove()})),e.querySelectorAll("iframe").forEach((function(n){return n.remove()})),e.querySelectorAll("*").forEach((function(n){Array.from(n.attributes).forEach((function(e){(e.name.startsWith("on")||"href"===e.name&&e.value.startsWith("javascript:"))&&n.removeAttribute(e.name)}))})),e.innerHTML},n.prototype.getScoreClass=function(n){return n>90?"high-score":n>75?"medium-score":n>60?"low-score":"no-score"},n}();document.addEventListener("DOMContentLoaded",(function(){new v}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,