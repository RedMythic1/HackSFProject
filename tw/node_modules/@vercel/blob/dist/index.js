import {
  BlobAccessError,
  BlobError,
  BlobNotFoundError,
  BlobStoreNotFoundError,
  BlobStoreSuspendedError,
  BlobUnknownError,
  createPutMethod,
  getApiUrl,
  getApiVersionHeader,
  getTokenFromOptionsOrEnv,
  validateBlobApiResponse
} from "./chunk-CYI6I6VP.js";

// src/index.ts
import { fetch as fetch2 } from "undici";

// src/copy.ts
import { fetch } from "undici";
async function copy(fromUrl, toPathname, options) {
  if (!options) {
    throw new BlobError("missing options, see usage");
  }
  if (options.access !== "public") {
    throw new BlobError('access must be "public"');
  }
  const headers = {
    ...getApiVersionHeader(),
    authorization: `Bearer ${getTokenFromOptionsOrEnv(options)}`
  };
  if (options.addRandomSuffix !== void 0) {
    headers["x-add-random-suffix"] = options.addRandomSuffix ? "1" : "0";
  }
  if (options.contentType) {
    headers["x-content-type"] = options.contentType;
  }
  if (options.cacheControlMaxAge !== void 0) {
    headers["x-cache-control-max-age"] = options.cacheControlMaxAge.toString();
  }
  const blobApiResponse = await fetch(
    getApiUrl(`/${toPathname}?fromUrl=${fromUrl}`),
    { method: "PUT", headers }
  );
  await validateBlobApiResponse(blobApiResponse);
  return await blobApiResponse.json();
}

// src/index.ts
var put = createPutMethod({
  allowedOptions: ["cacheControlMaxAge", "addRandomSuffix", "contentType"]
});
async function del(url, options) {
  const blobApiResponse = await fetch2(getApiUrl("/delete"), {
    method: "POST",
    headers: {
      ...getApiVersionHeader(),
      authorization: `Bearer ${getTokenFromOptionsOrEnv(options)}`,
      "content-type": "application/json"
    },
    body: JSON.stringify({ urls: Array.isArray(url) ? url : [url] })
  });
  await validateBlobApiResponse(blobApiResponse);
  await blobApiResponse.json();
}
async function head(url, options) {
  const headApiUrl = new URL(getApiUrl());
  headApiUrl.searchParams.set("url", url);
  const blobApiResponse = await fetch2(headApiUrl, {
    method: "GET",
    // HEAD can't have body as a response, so we use GET
    headers: {
      ...getApiVersionHeader(),
      authorization: `Bearer ${getTokenFromOptionsOrEnv(options)}`
    }
  });
  await validateBlobApiResponse(blobApiResponse);
  const headResult = await blobApiResponse.json();
  return mapBlobResult(headResult);
}
async function list(options) {
  const listApiUrl = new URL(getApiUrl());
  if (options == null ? void 0 : options.limit) {
    listApiUrl.searchParams.set("limit", options.limit.toString());
  }
  if (options == null ? void 0 : options.prefix) {
    listApiUrl.searchParams.set("prefix", options.prefix);
  }
  if (options == null ? void 0 : options.cursor) {
    listApiUrl.searchParams.set("cursor", options.cursor);
  }
  const blobApiResponse = await fetch2(listApiUrl, {
    method: "GET",
    headers: {
      ...getApiVersionHeader(),
      authorization: `Bearer ${getTokenFromOptionsOrEnv(options)}`
    }
  });
  await validateBlobApiResponse(blobApiResponse);
  const results = await blobApiResponse.json();
  return {
    ...results,
    blobs: results.blobs.map(mapBlobResult)
  };
}
function mapBlobResult(blobResult) {
  return {
    ...blobResult,
    uploadedAt: new Date(blobResult.uploadedAt)
  };
}
export {
  BlobAccessError,
  BlobError,
  BlobNotFoundError,
  BlobStoreNotFoundError,
  BlobStoreSuspendedError,
  BlobUnknownError,
  copy,
  del,
  head,
  list,
  put
};
//# sourceMappingURL=index.js.map